- [Instructor] One thing that you can do is that if you like, overall, the structure that an accessibility-ready theme has, you can build a child theme on top of it and create your customizations for that. So that's one of the things that we've done here, is we picked an accessibility-ready theme out of the Theme Directory for WordPress. This one happens to be called Reykjavik, so it has some accessibility supports by default, because it passed those checks, but we did our own customizations, and we created a child theme on top of that. What that allows us to do is, through child theming, we're able to make changes and customizations on top of that base theme that we have, that parent theme of Reykjavik, and add our own code on top that might be just CSS, or it might be changes to the structure of something like, you know, like how these bullets lay out, right, or you know, what background image comes through, or you know, how these buttons work and look here, and you know, what we do to add, say, skip back to the main navigation or what we do with forms. So we can, through our child theme, override the defaults that are in the parent theme, and that allows us to update that parent theme without breaking the changes. So one thing that we had was we had some Google fonts that, or not Google fonts, we had Typekit fonts, so this theme uses Google fonts, and the parent theme does, and we created Typekit fonts for this, so we wanted to use some Typekit fonts. That's all great, but the parent theme didn't support it, so we added it in, and one of the things that we did is when we first started working with the parent theme, Reykjavik, someone added the fonts to Typekit in the parent theme, and then, I came along, and I said, "Okay, I'm gonna take "all these customizations, and I'm gonna put them "in a child theme." Well, I forgot about the Typekit fonts. I did all the other things, and we created a child theme, and we have all our overrides in it, and then, we launched the site, and everything was looking great, and the other day, I went in, and I made some updates, so of course, WordPress, you know, you have a lot of updates happen. You have plugin updates, you have theme updates, and this theme developer, who's very responsible, I think it's WebMan Themes out of Europe, they updated the Reykjavik theme, and what happens when you update a theme is, or a plugin is it overwrites itself with the new code. So, and it overwrites it wholesale, so we lost, in the parent theme, where we had called for the Typekit fonts, we lost that call. It was in the header or PHP, and I just forgot about it. I didn't, or I didn't notice it, so I didn't put it in the child theme. So I had to go back and add it to the child theme, and so the lesson is, if you find a theme that you like, in the Theme repository, and it's accessibility-ready, that's great, you can go ahead and use that theme, if you want, and you can use it as your base theme, but if you make modifications to it, or if you plan to, beyond just adding content in your WordPress database and changing, or customizing, making, you know, customized, customizing the variables that are in here, like if I change any of, say, you know, the colors, right, so I wanna do a prime, a different default primary color here for this, so I can change it from blue to a purplish color. So now, instead of blue, we see purple here. You know, you can make these little customizer modifications no problem in parent themes, but if you plan to do anything to the actual files, in your parent theme, then you absolutely need to use a child theme, and that way, you can make these changes in a nondestructive way, and those changes get preserved even if the parent theme updates itself. So the things that we have done in our theme are to call some additional helper files. I believe we're calling a JavaScript to provide some additional accessibility supports for the main menu, for when you open up the search, the search box, and I'll look for that, and see if I can find that and show you what that looks like. So let's see. We're having the Typekits, and then, we have jQuery coming in, because it's WordPress. Let's see. And I don't think, I don't think I have it here on this. Yeah. This probably doesn't have that JavaScript helper file in it on this page, but we've basically taken the accessible defaults of WordPress, using an accessibility-ready theme, and then, layered our own child theme on top of that, to create a more accessible and customized version of this theme for us, and that's what using a child theme on top of an accessibility-ready theme would give you.